#include "quavis/vk/geometry/geometry.h"
#include "quavis/vk/geometry/triangulation.hpp"
#include <vector>

namespace quavis {
  namespace triangulation {
    void test_square_with_hole() {
      std::vector<vec3> polygon = {
        {0,0,0},
        {0,1,0},
        {1,1,0},
        {1,0,0},
        {0,0,0},
        {.25,.25,0},
        {.75,.25,0},
        {.75,.75,0},
        {.25,.75,0},
        {.25,.25,0}
      };

      std::vector<vec3> expected = {
        {0.000000,1.000000,0.000000},
        {1.000000,1.000000,0.000000},
        {0.750000,0.750000,0.000000},
        {0.000000,1.000000,0.000000},
        {0.750000,0.750000,0.000000},
        {0.250000,0.750000,0.000000},
        {0.000000,1.000000,0.000000},
        {0.250000,0.750000,0.000000},
        {0.250000,0.250000,0.000000},
        {0.750000,0.250000,0.000000},
        {0.750000,0.750000,0.000000},
        {1.000000,1.000000,0.000000},
        {0.750000,0.250000,0.000000},
        {1.000000,1.000000,0.000000},
        {1.000000,0.000000,0.000000},
        {0.750000,0.250000,0.000000},
        {1.000000,0.000000,0.000000},
        {0.000000,0.000000,0.000000},
        {0.000000,0.000000,0.000000},
        {0.000000,1.000000,0.000000},
        {0.250000,0.250000,0.000000},
        {0.000000,0.000000,0.000000},
        {0.250000,0.250000,0.000000},
        {0.750000,0.250000,0.000000}
      };

      std::vector<vec3> result = triangulate(polygon);
      for (size_t i = 0; i < result.size(); i++) {
        if(!(result[i] == expected[i])) throw;
      }
    }

    void test_with_two_holes() {
      std::vector<vec3> polygon = {
        {-3,-3,0},
        {-3,3,0},
        {3,3,0},
        {3,-3,0},
        {-3,-3,0},
        {0.5,0,0},
        {0.5,-1,0},
        {1,0,0},
        {0.5,1,0},
        {-0.5,1,0},
        {-1,0,0},
        {-0.5,-1,0},
        {-0.5,0,0},
        {0.5,0,0},
        {2.25,2.25,0},
        {2.75,2.25,0},
        {2.75,2.75,0},
        {2.25,2.75,0},
        {2.25,2.25,0},
      };

      std::vector<vec3> expected = {
        {-3.000000,3.000000,0.000000},
        {3.000000,3.000000,0.000000},
        {2.750000,2.750000,0.000000},
        {-3.000000,3.000000,0.000000},
        {2.750000,2.750000,0.000000},
        {2.250000,2.750000,0.000000},
        {-3.000000,3.000000,0.000000},
        {2.250000,2.750000,0.000000},
        {2.250000,2.250000,0.000000},
        {-3.000000,3.000000,0.000000},
        {2.250000,2.250000,0.000000},
        {0.500000,1.000000,0.000000},
        {-3.000000,3.000000,0.000000},
        {0.500000,1.000000,0.000000},
        {-0.500000,1.000000,0.000000},
        {-3.000000,3.000000,0.000000},
        {-0.500000,1.000000,0.000000},
        {-1.000000,0.000000,0.000000},
        {-3.000000,3.000000,0.000000},
        {-1.000000,0.000000,0.000000},
        {-0.500000,-1.000000,0.000000},
        {-0.500000,-1.000000,0.000000},
        {-0.500000,0.000000,0.000000},
        {0.500000,0.000000,0.000000},
        {-0.500000,-1.000000,0.000000},
        {0.500000,0.000000,0.000000},
        {0.500000,-1.000000,0.000000},
        {1.000000,0.000000,0.000000},
        {0.500000,1.000000,0.000000},
        {2.250000,2.250000,0.000000},
        {1.000000,0.000000,0.000000},
        {2.250000,2.250000,0.000000},
        {2.750000,2.250000,0.000000},
        {2.750000,2.250000,0.000000},
        {2.750000,2.750000,0.000000},
        {3.000000,3.000000,0.000000},
        {2.750000,2.250000,0.000000},
        {3.000000,3.000000,0.000000},
        {3.000000,-3.000000,0.000000},
        {-3.000000,-3.000000,0.000000},
        {-3.000000,3.000000,0.000000},
        {-0.500000,-1.000000,0.000000},
        {-3.000000,-3.000000,0.000000},
        {-0.500000,-1.000000,0.000000},
        {0.500000,-1.000000,0.000000},
        {0.500000,-1.000000,0.000000},
        {1.000000,0.000000,0.000000},
        {2.750000,2.250000,0.000000},
        {0.500000,-1.000000,0.000000},
        {2.750000,2.250000,0.000000},
        {3.000000,-3.000000,0.000000},
        {-3.000000,-3.000000,0.000000},
        {0.500000,-1.000000,0.000000},
        {3.000000,-3.000000,0.000000}
      };

      std::vector<vec3> result = triangulate(polygon);
      for (size_t i = 0; i < result.size(); i++) {
        if(!(result[i] == expected[i])) throw;
      }
    }

    void test_square() {
      std::vector<vec3> polygon = {
        {0,0,0},
        {0,1,0},
        {1,1,0},
        {1,0,0},
        {0,0,0}
      };

      std::vector<vec3> expected = {
        {0,0,0},
        {0,1,0},
        {1,1,0},
        {0,0,0},
        {1,1,0},
        {1,0,0}
      };

      std::vector<vec3> result = triangulate(polygon);
      for (size_t i = 0; i < result.size(); i++) {
        if(!(result[i] == expected[i])) throw;
      }
    }

    void test_rotated_square() {
      std::vector<vec3> polygon = {
        {0,0,1},
        {0,1,1},
        {1,1,0},
        {1,0,0},
        {0,0,1}
      };

      std::vector<vec3> expected = {
        {0,0,1},
        {0,1,1},
        {1,1,0},
        {0,0,1},
        {1,1,0},
        {1,0,0}
      };

      std::vector<vec3> result = triangulate(polygon);
      for (size_t i = 0; i < result.size(); i++) {
        if(!(result[i] == expected[i])) throw;
      }
    }

    void test_polygon_no_holes() {
      std::vector<vec3> polygon = {
        {0.5,0,0},
        {0.5,-1,0},
        {1,0,0},
        {0.5,1,0},
        {-0.5,1,0},
        {-1,0,0},
        {-0.5,-1,0},
        {-0.5,0,0},
        {0.5,0,0}
      };

      std::vector<vec3> expected = {
        {0.500000,0.000000,0.000000},
        {0.500000,-1.000000,0.000000},
        {1.000000,0.000000,0.000000},
        {0.500000,0.000000,0.000000},
        {1.000000,0.000000,0.000000},
        {0.500000,1.000000,0.000000},
        {0.500000,0.000000,0.000000},
        {0.500000,1.000000,0.000000},
        {-0.500000,1.000000,0.000000},
        {-1.000000,0.000000,0.000000},
        {-0.500000,-1.000000,0.000000},
        {-0.500000,0.000000,0.000000},
        {-0.500000,0.000000,0.000000},
        {0.500000,0.000000,0.000000},
        {-0.500000,1.000000,0.000000},
        {-0.500000,1.000000,0.000000},
        {-1.000000,0.000000,0.000000},
        {-0.500000,0.000000,0.000000}
      };

      std::vector<vec3> result = triangulate(polygon);
      for (size_t i = 0; i < result.size(); i++) {
        if(!(result[i] == expected[i])) throw;
      }
    }

    void test_polygon_to_infinite_loop() {
      std::vector<vec3> polygon = {
        {74.71045944395425f, -23.727069709868164f, 0},
        {74.4797736453055f, -24.762142701622114f, 0},
        {71.35795985729047f, -23.676159794882356f, 0},
        {69.0029188166188f, -30.465307716788327f, 0},
        {75.44574541060805f, -32.70065889898211f, 0},
        {78.25259814807123f, -25.021594788006293f, 0},
        {74.71045944395425f, -23.727069709868164f, 0}
      };
      std::vector<vec3> result = triangulate(polygon);
    }
  }
}

int main() {
  quavis::triangulation::test_square();
  quavis::triangulation::test_rotated_square();
  quavis::triangulation::test_polygon_no_holes();
  quavis::triangulation::test_square_with_hole();
  quavis::triangulation::test_with_two_holes();
  quavis::triangulation::test_polygon_to_infinite_loop();
}
